// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: question.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createQuestion = `-- name: CreateQuestion :one
insert into question(id, created_at, updated_at, question, option1, option2, option3, option4, correct, testid)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
returning id, created_at, updated_at, question, option1, option2, option3, option4, correct, testid
`

type CreateQuestionParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Question  string
	Option1   string
	Option2   string
	Option3   string
	Option4   string
	Correct   string
	Testid    uuid.UUID
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Question,
		arg.Option1,
		arg.Option2,
		arg.Option3,
		arg.Option4,
		arg.Correct,
		arg.Testid,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Question,
		&i.Option1,
		&i.Option2,
		&i.Option3,
		&i.Option4,
		&i.Correct,
		&i.Testid,
	)
	return i, err
}

const evaluate = `-- name: Evaluate :one
select
case
	when correct = $1 then true
	else false
	end as evaluate
from question where id = $2 and testid = $3
`

type EvaluateParams struct {
	Correct string
	ID      uuid.UUID
	Testid  uuid.UUID
}

func (q *Queries) Evaluate(ctx context.Context, arg EvaluateParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, evaluate, arg.Correct, arg.ID, arg.Testid)
	var evaluate bool
	err := row.Scan(&evaluate)
	return evaluate, err
}

const getAllQuestionsTest = `-- name: GetAllQuestionsTest :many
select id, created_at, updated_at, question, option1, option2, option3, option4, correct, testid from question
where testid = $1
`

func (q *Queries) GetAllQuestionsTest(ctx context.Context, testid uuid.UUID) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuestionsTest, testid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Question,
			&i.Option1,
			&i.Option2,
			&i.Option3,
			&i.Option4,
			&i.Correct,
			&i.Testid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
