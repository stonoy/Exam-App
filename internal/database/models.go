// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ExamUserStatus string

const (
	ExamUserStatusAvailable ExamUserStatus = "available"
	ExamUserStatusPaused    ExamUserStatus = "paused"
	ExamUserStatusCompleted ExamUserStatus = "completed"
)

func (e *ExamUserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExamUserStatus(s)
	case string:
		*e = ExamUserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ExamUserStatus: %T", src)
	}
	return nil
}

type NullExamUserStatus struct {
	ExamUserStatus ExamUserStatus
	Valid          bool // Valid is true if ExamUserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExamUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ExamUserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExamUserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExamUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExamUserStatus), nil
}

type UserRole string

const (
	UserRoleStudent UserRole = "student"
	UserRoleAdmin   UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type ExamUser struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Userid        uuid.UUID
	Examid        uuid.UUID
	Score         int32
	RemainingTime int32
	Status        ExamUserStatus
}

type Question struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Question  string
	Option1   string
	Option2   string
	Option3   string
	Option4   string
	Correct   string
	Examid    uuid.UUID
}

type User struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Email     string
	Password  string
	Role      UserRole
}
