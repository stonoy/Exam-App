// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: test_users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTestUser = `-- name: CreateTestUser :one
insert into test_user(id, created_at, updated_at, testid, userid, score, remaining_time, status)
values ($1, $2, $3, $4, $5, $6, $7, $8)
returning id, created_at, updated_at, userid, testid, score, remaining_time, status
`

type CreateTestUserParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Testid        uuid.UUID
	Userid        uuid.UUID
	Score         int32
	RemainingTime int32
	Status        TestUserStatus
}

func (q *Queries) CreateTestUser(ctx context.Context, arg CreateTestUserParams) (TestUser, error) {
	row := q.db.QueryRowContext(ctx, createTestUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Testid,
		arg.Userid,
		arg.Score,
		arg.RemainingTime,
		arg.Status,
	)
	var i TestUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Testid,
		&i.Score,
		&i.RemainingTime,
		&i.Status,
	)
	return i, err
}

const getTestUserPresent = `-- name: GetTestUserPresent :one
select id, created_at, updated_at, userid, testid, score, remaining_time, status from test_user where testid = $1 and userid = $2
`

type GetTestUserPresentParams struct {
	Testid uuid.UUID
	Userid uuid.UUID
}

func (q *Queries) GetTestUserPresent(ctx context.Context, arg GetTestUserPresentParams) (TestUser, error) {
	row := q.db.QueryRowContext(ctx, getTestUserPresent, arg.Testid, arg.Userid)
	var i TestUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Testid,
		&i.Score,
		&i.RemainingTime,
		&i.Status,
	)
	return i, err
}

const getTestsOfUser = `-- name: GetTestsOfUser :many
select tu.id, tu.created_at, tu.updated_at, tu.userid, tu.testid, tu.score, tu.remaining_time, tu.status, t.id, t.created_at, t.updated_at, t.name, t.description, t.subject, t.duration, t.total_participents, t.max_score, t.avg_score from test_user tu
inner join test t on tu.testid = t.id
where tu.userid = $1 and tu.status = $2
`

type GetTestsOfUserParams struct {
	Userid uuid.UUID
	Status TestUserStatus
}

type GetTestsOfUserRow struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	UpdatedAt         time.Time
	Userid            uuid.UUID
	Testid            uuid.UUID
	Score             int32
	RemainingTime     int32
	Status            TestUserStatus
	ID_2              uuid.UUID
	CreatedAt_2       time.Time
	UpdatedAt_2       time.Time
	Name              string
	Description       string
	Subject           string
	Duration          int32
	TotalParticipents int32
	MaxScore          int32
	AvgScore          int32
}

func (q *Queries) GetTestsOfUser(ctx context.Context, arg GetTestsOfUserParams) ([]GetTestsOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getTestsOfUser, arg.Userid, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTestsOfUserRow
	for rows.Next() {
		var i GetTestsOfUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Userid,
			&i.Testid,
			&i.Score,
			&i.RemainingTime,
			&i.Status,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
			&i.Description,
			&i.Subject,
			&i.Duration,
			&i.TotalParticipents,
			&i.MaxScore,
			&i.AvgScore,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pauseTestUser = `-- name: PauseTestUser :one
update test_user
set remaining_time = $1,
status = $2
where testid = $3 and userid = $4 and status = $5
returning id, created_at, updated_at, userid, testid, score, remaining_time, status
`

type PauseTestUserParams struct {
	RemainingTime int32
	Status        TestUserStatus
	Testid        uuid.UUID
	Userid        uuid.UUID
	Status_2      TestUserStatus
}

func (q *Queries) PauseTestUser(ctx context.Context, arg PauseTestUserParams) (TestUser, error) {
	row := q.db.QueryRowContext(ctx, pauseTestUser,
		arg.RemainingTime,
		arg.Status,
		arg.Testid,
		arg.Userid,
		arg.Status_2,
	)
	var i TestUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Testid,
		&i.Score,
		&i.RemainingTime,
		&i.Status,
	)
	return i, err
}

const restartTestUser = `-- name: RestartTestUser :one
update test_user
set status = $1
where testid = $2 and userid = $3 and status = $4
returning id, created_at, updated_at, userid, testid, score, remaining_time, status
`

type RestartTestUserParams struct {
	Status   TestUserStatus
	Testid   uuid.UUID
	Userid   uuid.UUID
	Status_2 TestUserStatus
}

func (q *Queries) RestartTestUser(ctx context.Context, arg RestartTestUserParams) (TestUser, error) {
	row := q.db.QueryRowContext(ctx, restartTestUser,
		arg.Status,
		arg.Testid,
		arg.Userid,
		arg.Status_2,
	)
	var i TestUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Testid,
		&i.Score,
		&i.RemainingTime,
		&i.Status,
	)
	return i, err
}

const submitTestAndUpdate = `-- name: SubmitTestAndUpdate :one
update test_user
set remaining_time = $1,
status = $2,
score = $3
where testid = $4 and userid = $5 and status = $6
returning id, created_at, updated_at, userid, testid, score, remaining_time, status
`

type SubmitTestAndUpdateParams struct {
	RemainingTime int32
	Status        TestUserStatus
	Score         int32
	Testid        uuid.UUID
	Userid        uuid.UUID
	Status_2      TestUserStatus
}

func (q *Queries) SubmitTestAndUpdate(ctx context.Context, arg SubmitTestAndUpdateParams) (TestUser, error) {
	row := q.db.QueryRowContext(ctx, submitTestAndUpdate,
		arg.RemainingTime,
		arg.Status,
		arg.Score,
		arg.Testid,
		arg.Userid,
		arg.Status_2,
	)
	var i TestUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Testid,
		&i.Score,
		&i.RemainingTime,
		&i.Status,
	)
	return i, err
}
